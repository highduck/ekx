{
  "version": 3,
  "sources": ["../../web/src/lib.ts"],
  "sourcesContent": ["import type {LoadRequest} from \"./index\";\n\ndeclare global {\n    class LibraryManager {\n        static library: LibraryManager;\n    }\n\n    function mergeInto(library: LibraryManager, module: any): void;\n\n    const HEAP32: Int32Array;\n    const HEAPU32: Uint32Array;\n\n    interface EmscriptenGLContext {\n        readonly GLctx: WebGLRenderingContext;\n    }\n\n    interface EmscriptenGL {\n        readonly currentContext: EmscriptenGLContext;\n    }\n\n    const GL: EmscriptenGL;\n    const TextureLoader: {\n        get: any,\n        load: any,\n        destroy: any\n    };\n}\n\nconst LibTextureLoader = {\n    texloader_create__deps: ['$GL'],\n    texloader_create: function (pUrls: number, numImages: number, pBasePath: number, pVersion: number, flags: number, formatMask: number): number {\n        const req: LoadRequest = {\n            urls: [],\n            formatMask,\n            flags,\n            gl: GL.currentContext.GLctx\n        };\n        if (pBasePath) {\n            req.basePath = UTF8ToString(pBasePath);\n        }\n        if (pVersion) {\n            req.version = UTF8ToString(pVersion);\n        }\n\n        for (let i = 0; i < numImages; ++i) {\n            const pUrl = HEAPU32[(pUrls >> 2) + i];\n            if (pUrl) {\n                req.urls[i] = UTF8ToString(pUrl);\n            }\n        }\n\n        return TextureLoader.load(req);\n    },\n    texloader_get: function (id: number, pState: number): number {\n        const obj = TextureLoader.get(id);\n        if (obj && pState) {\n            let i = pState >>> 2;\n            HEAP32[i++] = obj.progress;\n            HEAP32[i++] = obj.w;\n            HEAP32[i++] = obj.h;\n            HEAP32[i++] = obj.texture != null ? 2 : 1;\n            HEAP32[i++] = obj.textureID;\n            return 0;\n        }\n        return 1;\n    },\n    texloader_destroy: function (id: number): number {\n        return TextureLoader.destroy(id);\n    }\n};\n\nmergeInto(LibraryManager.library, LibTextureLoader);"],
  "mappings": ";AA4BA,IAAM,mBAAmB;AAAA,EACrB,wBAAwB,CAAC,KAAK;AAAA,EAC9B,kBAAkB,SAAU,OAAe,WAAmB,WAAmB,UAAkB,OAAe,YAA4B;AAC1I,UAAM,MAAmB;AAAA,MACrB,MAAM,CAAC;AAAA,MACP;AAAA,MACA;AAAA,MACA,IAAI,GAAG,eAAe;AAAA,IAC1B;AACA,QAAI,WAAW;AACX,UAAI,WAAW,aAAa,SAAS;AAAA,IACzC;AACA,QAAI,UAAU;AACV,UAAI,UAAU,aAAa,QAAQ;AAAA,IACvC;AAEA,aAAS,IAAI,GAAG,IAAI,WAAW,EAAE,GAAG;AAChC,YAAM,OAAO,QAAS,UAAS,KAAK;AACpC,UAAI,MAAM;AACN,YAAI,KAAK,KAAK,aAAa,IAAI;AAAA,MACnC;AAAA,IACJ;AAEA,WAAO,cAAc,KAAK,GAAG;AAAA,EACjC;AAAA,EACA,eAAe,SAAU,IAAY,QAAwB;AACzD,UAAM,MAAM,cAAc,IAAI,EAAE;AAChC,QAAI,OAAO,QAAQ;AACf,UAAI,IAAI,WAAW;AACnB,aAAO,OAAO,IAAI;AAClB,aAAO,OAAO,IAAI;AAClB,aAAO,OAAO,IAAI;AAClB,aAAO,OAAO,IAAI,WAAW,OAAO,IAAI;AACxC,aAAO,OAAO,IAAI;AAClB,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB,SAAU,IAAoB;AAC7C,WAAO,cAAc,QAAQ,EAAE;AAAA,EACnC;AACJ;AAEA,UAAU,eAAe,SAAS,gBAAgB;",
  "names": []
}
