#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Overview:

        Shader program 'draw2d':
            Get shader desc: draw2d_shader_desc()
            Vertex shader: vs_2d
                Attribute slots:
                    ATTR_vs_2d_aPosition = 0
                    ATTR_vs_2d_aTexCoord = 1
                    ATTR_vs_2d_aColorMult = 2
                    ATTR_vs_2d_aColorOffset = 3
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs_2d
                Image 'uImage0':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_uImage0 = 0

        Shader program 'draw2d_alpha':
            Get shader desc: draw2d_alpha_shader_desc()
            Vertex shader: vs_2d
                Attribute slots:
                    ATTR_vs_2d_aPosition = 0
                    ATTR_vs_2d_aTexCoord = 1
                    ATTR_vs_2d_aColorMult = 2
                    ATTR_vs_2d_aColorOffset = 3
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs_2d_alpha
                Image 'uImage0':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_uImage0 = 0

        Shader program 'draw2d_color':
            Get shader desc: draw2d_color_shader_desc()
            Vertex shader: vs_2d_color
                Attribute slots:
                    ATTR_vs_2d_color_aPosition = 0
                    ATTR_vs_2d_color_aTexCoord = 1
                    ATTR_vs_2d_color_aColorMult = 2
                    ATTR_vs_2d_color_aColorOffset = 3
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs_2d_color


    Shader descriptor structs:

        sg_shader draw2d = sg_make_shader(draw2d_shader_desc());
        sg_shader draw2d_alpha = sg_make_shader(draw2d_alpha_shader_desc());
        sg_shader draw2d_color = sg_make_shader(draw2d_color_shader_desc());

    Vertex attribute locations for vertex shader 'vs_2d':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_2d_aPosition] = { ... },
                    [ATTR_vs_2d_aTexCoord] = { ... },
                    [ATTR_vs_2d_aColorMult] = { ... },
                    [ATTR_vs_2d_aColorOffset] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'vs_2d_color':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_2d_color_aPosition] = { ... },
                    [ATTR_vs_2d_color_aTexCoord] = { ... },
                    [ATTR_vs_2d_color_aColorMult] = { ... },
                    [ATTR_vs_2d_color_aColorOffset] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_uImage0 = 0;

    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .uModelViewProjection = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &vs_params, sizeof(vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_2d_aPosition (0)
#define ATTR_vs_2d_aTexCoord (1)
#define ATTR_vs_2d_aColorMult (2)
#define ATTR_vs_2d_aColorOffset (3)
#define ATTR_vs_2d_color_aPosition (0)
#define ATTR_vs_2d_color_aTexCoord (1)
#define ATTR_vs_2d_color_aColorMult (2)
#define ATTR_vs_2d_color_aColorOffset (3)
#define SLOT_uImage0 (0)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    float uModelViewProjection[16];
} vs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[4];
    out vec2 vTexCoord;
    layout(location = 1) in vec2 aTexCoord;
    out vec4 vColorMult;
    layout(location = 2) in vec4 aColorMult;
    layout(location = 3) in vec4 aColorOffset;
    out vec3 vColorOffset;
    layout(location = 0) in vec2 aPosition;
    
    void main()
    {
        vTexCoord = aTexCoord;
        vColorMult = vec4(aColorMult.xyz * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        vColorOffset = aColorOffset.xyz;
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_source_glsl330[553] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,
    0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,
    0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,
    0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,
    0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 vs_params[4];
    layout(location = 1) in vec2 aTexCoord;
    out vec4 vColorMult;
    layout(location = 2) in vec4 aColorMult;
    layout(location = 3) in vec4 aColorOffset;
    layout(location = 0) in vec2 aPosition;
    
    void main()
    {
        vColorMult = vec4((aColorMult.xyz + aColorOffset.xyz) * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_color_source_glsl330[467] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,
    0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x77,
    0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,
    0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D uImage0;
    
    in vec4 vColorMult;
    in vec2 vTexCoord;
    layout(location = 0) out vec4 frag_color;
    in vec3 vColorOffset;
    
    void main()
    {
        vec4 _27 = vColorMult * texture(uImage0, vTexCoord).x;
        frag_color = _27 + vec4(vColorOffset * _27.w, 0.0);
    }
    
*/
static const char fs_2d_alpha_source_glsl330[279] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2c,0x20,0x76,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x37,0x20,
    0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x37,0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D uImage0;
    
    in vec4 vColorMult;
    in vec2 vTexCoord;
    layout(location = 0) out vec4 frag_color;
    in vec3 vColorOffset;
    
    void main()
    {
        vec4 _24 = vColorMult * texture(uImage0, vTexCoord);
        frag_color = _24 + vec4(vColorOffset * _24.w, 0.0);
    }
    
*/
static const char fs_2d_source_glsl330[277] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x34,0x20,0x3d,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2c,0x20,0x76,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x34,0x20,0x2b,0x20,
    0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x20,0x2a,0x20,0x5f,0x32,0x34,0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    layout(location = 0) out vec4 frag_color;
    in vec4 vColorMult;
    
    void main()
    {
        frag_color = vColorMult;
    }
    
*/
static const char fs_2d_color_source_glsl330[124] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    
    uniform vec4 vs_params[4];
    varying vec2 vTexCoord;
    attribute vec2 aTexCoord;
    varying vec4 vColorMult;
    attribute vec4 aColorMult;
    attribute vec4 aColorOffset;
    varying vec3 vColorOffset;
    attribute vec2 aPosition;
    
    void main()
    {
        vTexCoord = aTexCoord;
        vColorMult = vec4(aColorMult.xyz * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        vColorOffset = aColorOffset.xyz;
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_source_glsl100[509] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,
    0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,
    0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,
    0x6e,0x67,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,
    0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x61,
    0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x76,0x61,0x72,0x79,
    0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,
    0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,
    0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x61,0x43,0x6f,0x6c,0x6f,
    0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,
    0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    
    uniform vec4 vs_params[4];
    attribute vec2 aTexCoord;
    varying vec4 vColorMult;
    attribute vec4 aColorMult;
    attribute vec4 aColorOffset;
    attribute vec2 aPosition;
    
    void main()
    {
        vColorMult = vec4((aColorMult.xyz + aColorOffset.xyz) * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_color_source_glsl100[415] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,
    0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,
    0x65,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,
    0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x28,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,
    0x79,0x7a,0x20,0x2b,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D uImage0;
    
    varying highp vec4 vColorMult;
    varying highp vec2 vTexCoord;
    varying highp vec3 vColorOffset;
    
    void main()
    {
        highp vec4 _27 = vColorMult * texture2D(uImage0, vTexCoord).x;
        gl_FragData[0] = _27 + vec4(vColorOffset * _27.w, 0.0);
    }
    
*/
static const char fs_2d_alpha_source_glsl100[334] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,0x0a,0x76,0x61,
    0x72,0x79,0x69,0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x76,0x61,0x72,
    0x79,0x69,0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,
    0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2c,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,
    0x20,0x3d,0x20,0x5f,0x32,0x37,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x37,
    0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D uImage0;
    
    varying highp vec4 vColorMult;
    varying highp vec2 vTexCoord;
    varying highp vec3 vColorOffset;
    
    void main()
    {
        highp vec4 _24 = vColorMult * texture2D(uImage0, vTexCoord);
        gl_FragData[0] = _24 + vec4(vColorOffset * _24.w, 0.0);
    }
    
*/
static const char fs_2d_source_glsl100[332] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,0x0a,0x76,0x61,
    0x72,0x79,0x69,0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x76,0x61,0x72,
    0x79,0x69,0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,
    0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x34,0x20,0x3d,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2c,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,0x3d,
    0x20,0x5f,0x32,0x34,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x34,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    varying highp vec4 vColorMult;
    
    void main()
    {
        gl_FragData[0] = vColorMult;
    }
    
*/
static const char fs_2d_color_source_glsl100[143] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x79,
    0x69,0x6e,0x67,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,
    0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,0x3d,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    uniform vec4 vs_params[4];
    out vec2 vTexCoord;
    layout(location = 1) in vec2 aTexCoord;
    out vec4 vColorMult;
    layout(location = 2) in vec4 aColorMult;
    layout(location = 3) in vec4 aColorOffset;
    out vec3 vColorOffset;
    layout(location = 0) in vec2 aPosition;
    
    void main()
    {
        vTexCoord = aTexCoord;
        vColorMult = vec4(aColorMult.xyz * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        vColorOffset = aColorOffset.xyz;
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_source_glsl300es[556] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,
    0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,
    0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2a,
    0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,
    0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,
    0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    uniform vec4 vs_params[4];
    layout(location = 1) in vec2 aTexCoord;
    out vec4 vColorMult;
    layout(location = 2) in vec4 aColorMult;
    layout(location = 3) in vec4 aColorOffset;
    layout(location = 0) in vec2 aPosition;
    
    void main()
    {
        vColorMult = vec4((aColorMult.xyz + aColorOffset.xyz) * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_color_source_glsl300es[470] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,
    0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x61,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x61,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,
    0x2e,0x30,0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D uImage0;
    
    in highp vec4 vColorMult;
    in highp vec2 vTexCoord;
    layout(location = 0) out highp vec4 frag_color;
    in highp vec3 vColorOffset;
    
    void main()
    {
        highp vec4 _27 = vColorMult * texture(uImage0, vTexCoord).x;
        frag_color = _27 + vec4(vColorOffset * _27.w, 0.0);
    }
    
*/
static const char fs_2d_alpha_source_glsl300es[364] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,
    0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,
    0x37,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,
    0x2c,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x5f,0x32,0x37,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x37,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D uImage0;
    
    in highp vec4 vColorMult;
    in highp vec2 vTexCoord;
    layout(location = 0) out highp vec4 frag_color;
    in highp vec3 vColorOffset;
    
    void main()
    {
        highp vec4 _24 = vColorMult * texture(uImage0, vTexCoord);
        frag_color = _24 + vec4(vColorOffset * _24.w, 0.0);
    }
    
*/
static const char fs_2d_source_glsl300es[362] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,
    0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,
    0x34,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,
    0x2c,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,
    0x32,0x34,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x34,0x2e,0x77,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    layout(location = 0) out highp vec4 frag_color;
    in highp vec4 vColorMult;
    
    void main()
    {
        frag_color = vColorMult;
    }
    
*/
static const char fs_2d_color_source_glsl300es[185] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,
    0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before draw2d_shader.h"
#endif
static inline const sg_shader_desc* draw2d_shader_desc(void) {
  if (sg_query_backend() == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    };
    return &desc;
  }
  if (sg_query_backend() == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    };
    return &desc;
  }
  if (sg_query_backend() == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    };
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* draw2d_alpha_shader_desc(void) {
  if (sg_query_backend() == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_alpha_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    };
    return &desc;
  }
  if (sg_query_backend() == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_alpha_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    };
    return &desc;
  }
  if (sg_query_backend() == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_alpha_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    };
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* draw2d_color_shader_desc(void) {
  if (sg_query_backend() == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_color_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_color_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "draw2d_color_shader";
    };
    return &desc;
  }
  if (sg_query_backend() == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_color_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_color_source_glsl100;
      desc.fs.entry = "main";
      desc.label = "draw2d_color_shader";
    };
    return &desc;
  }
  if (sg_query_backend() == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_color_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_color_source_glsl300es;
      desc.fs.entry = "main";
      desc.label = "draw2d_color_shader";
    };
    return &desc;
  }
  return 0;
}
