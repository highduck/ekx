#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i ek/src/ek/draw2d/draw2d.glsl -o ek/src/ek/draw2d/draw2d_shader.h -l glsl330:glsl300es:glsl100:hlsl5:metal_ios:metal_sim:metal_macos --ifdef

    Overview:

        Shader program 'draw2d':
            Get shader desc: draw2d_shader_desc(sg_query_backend());
            Vertex shader: vs_2d
                Attribute slots:
                    ATTR_vs_2d_aPosition = 0
                    ATTR_vs_2d_aTexCoord = 1
                    ATTR_vs_2d_aColorMult = 2
                    ATTR_vs_2d_aColorOffset = 3
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs_2d
                Image 'uImage0':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_uImage0 = 0

        Shader program 'draw2d_alpha':
            Get shader desc: draw2d_alpha_shader_desc(sg_query_backend());
            Vertex shader: vs_2d
                Attribute slots:
                    ATTR_vs_2d_aPosition = 0
                    ATTR_vs_2d_aTexCoord = 1
                    ATTR_vs_2d_aColorMult = 2
                    ATTR_vs_2d_aColorOffset = 3
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs_2d_alpha
                Image 'uImage0':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_uImage0 = 0

        Shader program 'draw2d_color':
            Get shader desc: draw2d_color_shader_desc(sg_query_backend());
            Vertex shader: vs_2d_color
                Attribute slots:
                    ATTR_vs_2d_color_aPosition = 0
                    ATTR_vs_2d_color_aTexCoord = 1
                    ATTR_vs_2d_color_aColorMult = 2
                    ATTR_vs_2d_color_aColorOffset = 3
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs_2d_color


    Shader descriptor structs:

        sg_shader draw2d = sg_make_shader(draw2d_shader_desc(sg_query_backend()));
        sg_shader draw2d_alpha = sg_make_shader(draw2d_alpha_shader_desc(sg_query_backend()));
        sg_shader draw2d_color = sg_make_shader(draw2d_color_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs_2d':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_2d_aPosition] = { ... },
                    [ATTR_vs_2d_aTexCoord] = { ... },
                    [ATTR_vs_2d_aColorMult] = { ... },
                    [ATTR_vs_2d_aColorOffset] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'vs_2d_color':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_2d_color_aPosition] = { ... },
                    [ATTR_vs_2d_color_aTexCoord] = { ... },
                    [ATTR_vs_2d_color_aColorMult] = { ... },
                    [ATTR_vs_2d_color_aColorOffset] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_uImage0 = 0;

    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .uModelViewProjection = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &SG_RANGE(vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_2d_aPosition (0)
#define ATTR_vs_2d_aTexCoord (1)
#define ATTR_vs_2d_aColorMult (2)
#define ATTR_vs_2d_aColorOffset (3)
#define ATTR_vs_2d_color_aPosition (0)
#define ATTR_vs_2d_color_aTexCoord (1)
#define ATTR_vs_2d_color_aColorMult (2)
#define ATTR_vs_2d_color_aColorOffset (3)
#define SLOT_uImage0 (0)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    float uModelViewProjection[16];
} vs_params_t;
#pragma pack(pop)
#if defined(SOKOL_GLCORE33)
/*
    #version 330
    
    uniform vec4 vs_params[4];
    out vec2 vTexCoord;
    layout(location = 1) in vec2 aTexCoord;
    out vec4 vColorMult;
    layout(location = 2) in vec4 aColorMult;
    layout(location = 3) in vec4 aColorOffset;
    out vec3 vColorOffset;
    layout(location = 0) in vec2 aPosition;
    
    void main()
    {
        vTexCoord = aTexCoord;
        vColorMult = vec4(aColorMult.xyz * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        vColorOffset = aColorOffset.xyz;
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_source_glsl330[553] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,
    0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,
    0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,
    0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,
    0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 vs_params[4];
    layout(location = 1) in vec2 aTexCoord;
    out vec4 vColorMult;
    layout(location = 2) in vec4 aColorMult;
    layout(location = 3) in vec4 aColorOffset;
    layout(location = 0) in vec2 aPosition;
    
    void main()
    {
        vColorMult = vec4((aColorMult.xyz + aColorOffset.xyz) * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_color_source_glsl330[467] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,
    0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x77,
    0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,
    0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D uImage0;
    
    in vec4 vColorMult;
    in vec2 vTexCoord;
    layout(location = 0) out vec4 frag_color;
    in vec3 vColorOffset;
    
    void main()
    {
        vec4 _28 = vColorMult * texture(uImage0, vTexCoord).x;
        frag_color = _28 + vec4(vColorOffset * _28.w, 0.0);
    }
    
*/
static const char fs_2d_alpha_source_glsl330[279] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x38,0x20,0x3d,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2c,0x20,0x76,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x38,0x20,
    0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x38,0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D uImage0;
    
    in vec4 vColorMult;
    in vec2 vTexCoord;
    layout(location = 0) out vec4 frag_color;
    in vec3 vColorOffset;
    
    void main()
    {
        vec4 _25 = vColorMult * texture(uImage0, vTexCoord);
        frag_color = _25 + vec4(vColorOffset * _25.w, 0.0);
    }
    
*/
static const char fs_2d_source_glsl330[277] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x35,0x20,0x3d,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2c,0x20,0x76,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x35,0x20,0x2b,0x20,
    0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x20,0x2a,0x20,0x5f,0x32,0x35,0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    layout(location = 0) out vec4 frag_color;
    in vec4 vColorMult;
    
    void main()
    {
        frag_color = vColorMult;
    }
    
*/
static const char fs_2d_color_source_glsl330[124] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLCORE33 */
#if defined(SOKOL_GLES2)
/*
    #version 100
    
    uniform vec4 vs_params[4];
    varying vec2 vTexCoord;
    attribute vec2 aTexCoord;
    varying vec4 vColorMult;
    attribute vec4 aColorMult;
    attribute vec4 aColorOffset;
    varying vec3 vColorOffset;
    attribute vec2 aPosition;
    
    void main()
    {
        vTexCoord = aTexCoord;
        vColorMult = vec4(aColorMult.xyz * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        vColorOffset = aColorOffset.xyz;
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_source_glsl100[509] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,
    0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,
    0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,
    0x6e,0x67,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,
    0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x61,
    0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x76,0x61,0x72,0x79,
    0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,
    0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,
    0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x61,0x43,0x6f,0x6c,0x6f,
    0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,
    0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    
    uniform vec4 vs_params[4];
    attribute vec2 aTexCoord;
    varying vec4 vColorMult;
    attribute vec4 aColorMult;
    attribute vec4 aColorOffset;
    attribute vec2 aPosition;
    
    void main()
    {
        vColorMult = vec4((aColorMult.xyz + aColorOffset.xyz) * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_color_source_glsl100[415] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,
    0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,
    0x65,0x74,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,
    0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x28,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,
    0x79,0x7a,0x20,0x2b,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    uniform mediump sampler2D uImage0;
    
    varying vec4 vColorMult;
    varying highp vec2 vTexCoord;
    varying vec3 vColorOffset;
    
    void main()
    {
        vec4 _28 = vColorMult * texture2D(uImage0, vTexCoord).x;
        gl_FragData[0] = _28 + vec4(vColorOffset * _28.w, 0.0);
    }
    
*/
static const char fs_2d_alpha_source_glsl100[318] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,0x0a,
    0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,
    0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x38,0x20,0x3d,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2c,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,
    0x20,0x3d,0x20,0x5f,0x32,0x38,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x38,
    0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    uniform mediump sampler2D uImage0;
    
    varying vec4 vColorMult;
    varying highp vec2 vTexCoord;
    varying vec3 vColorOffset;
    
    void main()
    {
        vec4 _25 = vColorMult * texture2D(uImage0, vTexCoord);
        gl_FragData[0] = _25 + vec4(vColorOffset * _25.w, 0.0);
    }
    
*/
static const char fs_2d_source_glsl100[316] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x3b,0x0a,0x0a,
    0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,
    0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x35,0x20,0x3d,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2c,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,0x3d,
    0x20,0x5f,0x32,0x35,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x35,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    varying vec4 vColorMult;
    
    void main()
    {
        gl_FragData[0] = vColorMult;
    }
    
*/
static const char fs_2d_color_source_glsl100[137] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x79,
    0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,
    0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLES2 */
#if defined(SOKOL_GLES3)
/*
    #version 300 es
    
    uniform vec4 vs_params[4];
    out vec2 vTexCoord;
    layout(location = 1) in vec2 aTexCoord;
    out vec4 vColorMult;
    layout(location = 2) in vec4 aColorMult;
    layout(location = 3) in vec4 aColorOffset;
    out vec3 vColorOffset;
    layout(location = 0) in vec2 aPosition;
    
    void main()
    {
        vTexCoord = aTexCoord;
        vColorMult = vec4(aColorMult.xyz * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        vColorOffset = aColorOffset.xyz;
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_source_glsl300es[556] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,
    0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,
    0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2a,
    0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,
    0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,
    0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    uniform vec4 vs_params[4];
    layout(location = 1) in vec2 aTexCoord;
    out vec4 vColorMult;
    layout(location = 2) in vec4 aColorMult;
    layout(location = 3) in vec4 aColorOffset;
    layout(location = 0) in vec2 aPosition;
    
    void main()
    {
        vColorMult = vec4((aColorMult.xyz + aColorOffset.xyz) * aColorMult.w, (1.0 - aColorOffset.w) * aColorMult.w);
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * vec4(aPosition, 0.0, 1.0);
    }
    
*/
static const char vs_2d_color_source_glsl300es[470] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x61,
    0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x61,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x61,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,
    0x2e,0x30,0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform mediump sampler2D uImage0;
    
    in vec4 vColorMult;
    in highp vec2 vTexCoord;
    layout(location = 0) out highp vec4 frag_color;
    in vec3 vColorOffset;
    
    void main()
    {
        vec4 _28 = vColorMult * texture(uImage0, vTexCoord).x;
        frag_color = _28 + vec4(vColorOffset * _28.w, 0.0);
    }
    
*/
static const char fs_2d_alpha_source_glsl300es[348] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,
    0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,
    0x66,0x73,0x65,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,
    0x38,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,
    0x2c,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x5f,0x32,0x38,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x38,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform mediump sampler2D uImage0;
    
    in vec4 vColorMult;
    in highp vec2 vTexCoord;
    layout(location = 0) out highp vec4 frag_color;
    in vec3 vColorOffset;
    
    void main()
    {
        vec4 _25 = vColorMult * texture(uImage0, vTexCoord);
        frag_color = _25 + vec4(vColorOffset * _25.w, 0.0);
    }
    
*/
static const char fs_2d_source_glsl300es[346] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,
    0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,
    0x66,0x73,0x65,0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,
    0x35,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,
    0x2c,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,
    0x32,0x35,0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x35,0x2e,0x77,0x2c,0x20,
    0x30,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    layout(location = 0) out highp vec4 frag_color;
    in vec4 vColorMult;
    
    void main()
    {
        frag_color = vColorMult;
    }
    
*/
static const char fs_2d_color_source_glsl300es[179] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLES3 */
#if defined(SOKOL_D3D11)
/*
    cbuffer vs_params : register(b0)
    {
        row_major float4x4 _55_uModelViewProjection : packoffset(c0);
    };
    
    
    static float4 gl_Position;
    static float2 vTexCoord;
    static float2 aTexCoord;
    static float4 vColorMult;
    static float4 aColorMult;
    static float4 aColorOffset;
    static float3 vColorOffset;
    static float2 aPosition;
    
    struct SPIRV_Cross_Input
    {
        float2 aPosition : TEXCOORD0;
        float2 aTexCoord : TEXCOORD1;
        float4 aColorMult : TEXCOORD2;
        float4 aColorOffset : TEXCOORD3;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 vTexCoord : TEXCOORD0;
        float4 vColorMult : TEXCOORD1;
        float3 vColorOffset : TEXCOORD2;
        float4 gl_Position : SV_Position;
    };
    
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
    void vert_main()
    {
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
        vTexCoord = aTexCoord;
    #line 21 "ek/src/ek/draw2d/draw2d.glsl"
        vColorMult = float4(aColorMult.xyz * aColorMult.w, (1.0f - aColorOffset.w) * aColorMult.w);
    #line 22 "ek/src/ek/draw2d/draw2d.glsl"
        vColorOffset = aColorOffset.xyz;
    #line 23 "ek/src/ek/draw2d/draw2d.glsl"
        gl_Position = mul(float4(aPosition, 0.0f, 1.0f), _55_uModelViewProjection);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        aTexCoord = stage_input.aTexCoord;
        aColorMult = stage_input.aColorMult;
        aColorOffset = stage_input.aColorOffset;
        aPosition = stage_input.aPosition;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.vTexCoord = vTexCoord;
        stage_output.vColorMult = vColorMult;
        stage_output.vColorOffset = vColorOffset;
        return stage_output;
    }
*/
static const char vs_2d_source_hlsl5[1601] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x35,0x35,0x5f,0x75,0x4d,
    0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,
    0x6f,0x6e,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3a,
    0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x33,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,
    0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,
    0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,
    0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x65,0x6b,0x2f,
    0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,
    0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x31,0x20,0x22,
    0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,
    0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x66,0x20,0x2d,0x20,0x61,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x61,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,
    0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x33,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,
    0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x35,0x35,0x5f,0x75,0x4d,0x6f,0x64,
    0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
    0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,
    0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x2e,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,
    0x3d,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,
    0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x00,
};
/*
    cbuffer vs_params : register(b0)
    {
        row_major float4x4 _51_uModelViewProjection : packoffset(c0);
    };
    
    
    static float4 gl_Position;
    static float2 aTexCoord;
    static float4 vColorMult;
    static float4 aColorMult;
    static float4 aColorOffset;
    static float2 aPosition;
    
    struct SPIRV_Cross_Input
    {
        float2 aPosition : TEXCOORD0;
        float2 aTexCoord : TEXCOORD1;
        float4 aColorMult : TEXCOORD2;
        float4 aColorOffset : TEXCOORD3;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 vColorMult : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    #line 19 "ek/src/ek/draw2d/draw2d.glsl"
    void vert_main()
    {
    #line 19 "ek/src/ek/draw2d/draw2d.glsl"
        vColorMult = float4((aColorMult.xyz + aColorOffset.xyz) * aColorMult.w, (1.0f - aColorOffset.w) * aColorMult.w);
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
        gl_Position = mul(float4(aPosition, 0.0f, 1.0f), _51_uModelViewProjection);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        aTexCoord = stage_input.aTexCoord;
        aColorMult = stage_input.aColorMult;
        aColorOffset = stage_input.aColorOffset;
        aPosition = stage_input.aPosition;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.vColorMult = vColorMult;
        return stage_output;
    }
*/
static const char vs_2d_color_source_hlsl5[1268] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x35,0x31,0x5f,0x75,0x4d,
    0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,
    0x6f,0x6e,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,
    0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x4d,0x75,0x6c,0x74,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x31,0x39,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,
    0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,
    0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,
    0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,
    0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x66,
    0x20,0x2d,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,
    0x77,0x29,0x20,0x2a,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,
    0x77,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x65,0x6b,
    0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,
    0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,
    0x20,0x5f,0x35,0x31,0x5f,0x75,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,
    0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x61,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x43,0x6f,0x6c,
    0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x00,
};
/*
    Texture2D<float4> uImage0 : register(t0);
    SamplerState _uImage0_sampler : register(s0);
    
    static float4 vColorMult;
    static float2 vTexCoord;
    static float4 frag_color;
    static float3 vColorOffset;
    
    struct SPIRV_Cross_Input
    {
        float2 vTexCoord : TEXCOORD0;
        float4 vColorMult : TEXCOORD1;
        float3 vColorOffset : TEXCOORD2;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };
    
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
    void frag_main()
    {
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
        float4 _28 = vColorMult * uImage0.Sample(_uImage0_sampler, vTexCoord).x;
        frag_color = _28 + float4(vColorOffset * _28.w, 0.0f);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        vColorMult = stage_input.vColorMult;
        vTexCoord = stage_input.vTexCoord;
        vColorOffset = stage_input.vColorOffset;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const char fs_2d_alpha_source_hlsl5[944] = {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,
    0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,
    0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,
    0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,
    0x38,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,
    0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,
    0x5f,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x2c,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x5f,0x32,0x38,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x38,
    0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
    0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,
    0x65,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,

};
/*
    Texture2D<float4> uImage0 : register(t0);
    SamplerState _uImage0_sampler : register(s0);
    
    static float4 vColorMult;
    static float2 vTexCoord;
    static float4 frag_color;
    static float3 vColorOffset;
    
    struct SPIRV_Cross_Input
    {
        float2 vTexCoord : TEXCOORD0;
        float4 vColorMult : TEXCOORD1;
        float3 vColorOffset : TEXCOORD2;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };
    
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
    void frag_main()
    {
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
        float4 _25 = vColorMult * uImage0.Sample(_uImage0_sampler, vTexCoord);
        frag_color = _25 + float4(vColorOffset * _25.w, 0.0f);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        vColorMult = stage_input.vColorMult;
        vTexCoord = stage_input.vTexCoord;
        vColorOffset = stage_input.vColorOffset;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const char fs_2d_source_hlsl5[942] = {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,
    0x74,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,
    0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,
    0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,
    0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,
    0x35,0x20,0x3d,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,
    0x20,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,
    0x5f,0x75,0x49,0x6d,0x61,0x67,0x65,0x30,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x2c,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,
    0x32,0x35,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x35,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x54,0x65,0x78,0x43,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    static float4 frag_color;
    static float4 vColorMult;
    
    struct SPIRV_Cross_Input
    {
        float4 vColorMult : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };
    
    #line 11 "ek/src/ek/draw2d/draw2d.glsl"
    void frag_main()
    {
    #line 11 "ek/src/ek/draw2d/draw2d.glsl"
        frag_color = vColorMult;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        vColorMult = stage_input.vColorMult;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const char fs_2d_color_source_hlsl5[540] = {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,
    0x6c,0x74,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,
    0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x31,0x31,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,
    0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,
    0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,
    0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
    0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,0x6c,0x6f,
    0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif /* SOKOL_D3D11 */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct vs_params
    {
        float4x4 uModelViewProjection;
    };
    
    struct main0_out
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 aPosition [[attribute(0)]];
        float2 aTexCoord [[attribute(1)]];
        float4 aColorMult [[attribute(2)]];
        float4 aColorOffset [[attribute(3)]];
    };
    
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _55 [[buffer(0)]])
    {
        main0_out out = {};
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
        out.vTexCoord = in.aTexCoord;
    #line 21 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorMult = float4(in.aColorMult.xyz * in.aColorMult.w, (1.0 - in.aColorOffset.w) * in.aColorMult.w);
    #line 22 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorOffset = in.aColorOffset.xyz;
    #line 23 "ek/src/ek/draw2d/draw2d.glsl"
        out.gl_Position = _55.uModelViewProjection * float4(in.aPosition, 0.0, 1.0);
        return out;
    }
    
*/
static const char vs_2d_source_metal_macos[1094] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,
    0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,
    0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x30,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,
    0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x35,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,
    0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,
    0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x65,0x6b,
    0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x2e,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x69,0x6e,0x2e,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x32,0x31,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,
    0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,
    0x78,0x79,0x7a,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x69,0x6e,
    0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x2e,0x77,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x65,
    0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,
    0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,
    0x33,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x75,0x4d,0x6f,0x64,0x65,
    0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,
    0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x61,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct vs_params
    {
        float4x4 uModelViewProjection;
    };
    
    struct main0_out
    {
        float4 vColorMult [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 aPosition [[attribute(0)]];
        float4 aColorMult [[attribute(2)]];
        float4 aColorOffset [[attribute(3)]];
    };
    
    #line 19 "ek/src/ek/draw2d/draw2d.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _51 [[buffer(0)]])
    {
        main0_out out = {};
    #line 19 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorMult = float4((in.aColorMult.xyz + in.aColorOffset.xyz) * in.aColorMult.w, (1.0 - in.aColorOffset.w) * in.aColorMult.w);
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
        out.gl_Position = _51.uModelViewProjection * float4(in.aPosition, 0.0, 1.0);
        return out;
    }
    
*/
static const char vs_2d_color_source_metal_macos[842] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,
    0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x33,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x65,0x6b,
    0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,
    0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,
    0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,
    0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,
    0x20,0x5f,0x35,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,
    0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x28,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x69,0x6e,
    0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,
    0x31,0x2e,0x30,0x20,0x2d,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,
    0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x35,0x31,0x2e,0x75,
    0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,
    0x69,0x6f,0x6e,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,
    0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
    };
    
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> uImage0 [[texture(0)]], sampler uImage0Smplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
        float4 _28 = in.vColorMult * uImage0.sample(uImage0Smplr, in.vTexCoord).x;
        out.frag_color = _28 + float4(in.vColorOffset * _28.w, 0.0);
        return out;
    }
    
*/
static const char fs_2d_alpha_source_metal_macos[670] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,
    0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,
    0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x38,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,
    0x30,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,
    0x38,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x38,
    0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
    };
    
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> uImage0 [[texture(0)]], sampler uImage0Smplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
        float4 _25 = in.vColorMult * uImage0.sample(uImage0Smplr, in.vTexCoord);
        out.frag_color = _25 + float4(in.vColorOffset * _25.w, 0.0);
        return out;
    }
    
*/
static const char fs_2d_source_metal_macos[668] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,
    0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,
    0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x35,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,
    0x30,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x35,0x20,
    0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x35,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float4 vColorMult [[user(locn0)]];
    };
    
    #line 11 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
    #line 11 "ek/src/ek/draw2d/draw2d.glsl"
        out.frag_color = in.vColorMult;
        return out;
    }
    
*/
static const char fs_2d_color_source_metal_macos[405] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,
    0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,
    0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x65,
    0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,
    0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_METAL */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct vs_params
    {
        float4x4 uModelViewProjection;
    };
    
    struct main0_out
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 aPosition [[attribute(0)]];
        float2 aTexCoord [[attribute(1)]];
        float4 aColorMult [[attribute(2)]];
        float4 aColorOffset [[attribute(3)]];
    };
    
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _55 [[buffer(0)]])
    {
        main0_out out = {};
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
        out.vTexCoord = in.aTexCoord;
    #line 21 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorMult = float4(in.aColorMult.xyz * in.aColorMult.w, (1.0 - in.aColorOffset.w) * in.aColorMult.w);
    #line 22 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorOffset = in.aColorOffset.xyz;
    #line 23 "ek/src/ek/draw2d/draw2d.glsl"
        out.gl_Position = _55.uModelViewProjection * float4(in.aPosition, 0.0, 1.0);
        return out;
    }
    
*/
static const char vs_2d_source_metal_ios[1094] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,
    0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,
    0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x30,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,
    0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x35,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,
    0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,
    0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x65,0x6b,
    0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x2e,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x69,0x6e,0x2e,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x32,0x31,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,
    0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,
    0x78,0x79,0x7a,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x69,0x6e,
    0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x2e,0x77,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x65,
    0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,
    0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,
    0x33,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x75,0x4d,0x6f,0x64,0x65,
    0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,
    0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x61,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct vs_params
    {
        float4x4 uModelViewProjection;
    };
    
    struct main0_out
    {
        float4 vColorMult [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 aPosition [[attribute(0)]];
        float4 aColorMult [[attribute(2)]];
        float4 aColorOffset [[attribute(3)]];
    };
    
    #line 19 "ek/src/ek/draw2d/draw2d.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _51 [[buffer(0)]])
    {
        main0_out out = {};
    #line 19 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorMult = float4((in.aColorMult.xyz + in.aColorOffset.xyz) * in.aColorMult.w, (1.0 - in.aColorOffset.w) * in.aColorMult.w);
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
        out.gl_Position = _51.uModelViewProjection * float4(in.aPosition, 0.0, 1.0);
        return out;
    }
    
*/
static const char vs_2d_color_source_metal_ios[842] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,
    0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x33,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x65,0x6b,
    0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,
    0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,
    0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,
    0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,
    0x20,0x5f,0x35,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,
    0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x28,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x69,0x6e,
    0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,
    0x31,0x2e,0x30,0x20,0x2d,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,
    0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x35,0x31,0x2e,0x75,
    0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,
    0x69,0x6f,0x6e,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,
    0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
    };
    
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> uImage0 [[texture(0)]], sampler uImage0Smplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
        float4 _28 = in.vColorMult * uImage0.sample(uImage0Smplr, in.vTexCoord).x;
        out.frag_color = _28 + float4(in.vColorOffset * _28.w, 0.0);
        return out;
    }
    
*/
static const char fs_2d_alpha_source_metal_ios[670] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,
    0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,
    0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x38,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,
    0x30,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,
    0x38,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x38,
    0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
    };
    
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> uImage0 [[texture(0)]], sampler uImage0Smplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
        float4 _25 = in.vColorMult * uImage0.sample(uImage0Smplr, in.vTexCoord);
        out.frag_color = _25 + float4(in.vColorOffset * _25.w, 0.0);
        return out;
    }
    
*/
static const char fs_2d_source_metal_ios[668] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,
    0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,
    0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x35,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,
    0x30,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x35,0x20,
    0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x35,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float4 vColorMult [[user(locn0)]];
    };
    
    #line 11 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
    #line 11 "ek/src/ek/draw2d/draw2d.glsl"
        out.frag_color = in.vColorMult;
        return out;
    }
    
*/
static const char fs_2d_color_source_metal_ios[405] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,
    0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,
    0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x65,
    0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,
    0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_METAL */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct vs_params
    {
        float4x4 uModelViewProjection;
    };
    
    struct main0_out
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 aPosition [[attribute(0)]];
        float2 aTexCoord [[attribute(1)]];
        float4 aColorMult [[attribute(2)]];
        float4 aColorOffset [[attribute(3)]];
    };
    
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _55 [[buffer(0)]])
    {
        main0_out out = {};
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
        out.vTexCoord = in.aTexCoord;
    #line 21 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorMult = float4(in.aColorMult.xyz * in.aColorMult.w, (1.0 - in.aColorOffset.w) * in.aColorMult.w);
    #line 22 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorOffset = in.aColorOffset.xyz;
    #line 23 "ek/src/ek/draw2d/draw2d.glsl"
        out.gl_Position = _55.uModelViewProjection * float4(in.aPosition, 0.0, 1.0);
        return out;
    }
    
*/
static const char vs_2d_source_metal_sim[1094] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,
    0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,
    0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,
    0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x30,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,
    0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x35,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,
    0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,
    0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x65,0x6b,
    0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x2e,0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x69,0x6e,0x2e,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x32,0x31,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,
    0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,
    0x78,0x79,0x7a,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x69,0x6e,
    0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x2e,0x77,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x32,0x20,0x22,0x65,
    0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,
    0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,
    0x74,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,
    0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,
    0x33,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x75,0x4d,0x6f,0x64,0x65,
    0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,
    0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x61,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct vs_params
    {
        float4x4 uModelViewProjection;
    };
    
    struct main0_out
    {
        float4 vColorMult [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float2 aPosition [[attribute(0)]];
        float4 aColorMult [[attribute(2)]];
        float4 aColorOffset [[attribute(3)]];
    };
    
    #line 19 "ek/src/ek/draw2d/draw2d.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant vs_params& _51 [[buffer(0)]])
    {
        main0_out out = {};
    #line 19 "ek/src/ek/draw2d/draw2d.glsl"
        out.vColorMult = float4((in.aColorMult.xyz + in.aColorOffset.xyz) * in.aColorMult.w, (1.0 - in.aColorOffset.w) * in.aColorMult.w);
    #line 20 "ek/src/ek/draw2d/draw2d.glsl"
        out.gl_Position = _51.uModelViewProjection * float4(in.aPosition, 0.0, 1.0);
        return out;
    }
    
*/
static const char vs_2d_color_source_metal_sim[842] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,
    0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,
    0x75,0x6c,0x74,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,
    0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x33,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x65,0x6b,
    0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,
    0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,
    0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,
    0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,
    0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,
    0x20,0x5f,0x35,0x31,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,
    0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,
    0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x28,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,
    0x4f,0x66,0x66,0x73,0x65,0x74,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x69,0x6e,
    0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x2c,0x20,0x28,
    0x31,0x2e,0x30,0x20,0x2d,0x20,0x69,0x6e,0x2e,0x61,0x43,0x6f,0x6c,0x6f,0x72,0x4f,
    0x66,0x66,0x73,0x65,0x74,0x2e,0x77,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x61,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x2e,0x77,0x29,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,
    0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x35,0x31,0x2e,0x75,
    0x4d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,
    0x69,0x6f,0x6e,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,
    0x61,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
    };
    
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> uImage0 [[texture(0)]], sampler uImage0Smplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
        float4 _28 = in.vColorMult * uImage0.sample(uImage0Smplr, in.vTexCoord).x;
        out.frag_color = _28 + float4(in.vColorOffset * _28.w, 0.0);
        return out;
    }
    
*/
static const char fs_2d_alpha_source_metal_sim[670] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,
    0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,
    0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x38,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,
    0x30,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x29,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,
    0x38,0x20,0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x38,
    0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 vTexCoord [[user(locn0)]];
        float4 vColorMult [[user(locn1)]];
        float3 vColorOffset [[user(locn2)]];
    };
    
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> uImage0 [[texture(0)]], sampler uImage0Smplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 15 "ek/src/ek/draw2d/draw2d.glsl"
        float4 _25 = in.vColorMult * uImage0.sample(uImage0Smplr, in.vTexCoord);
        out.frag_color = _25 + float4(in.vColorOffset * _25.w, 0.0);
        return out;
    }
    
*/
static const char fs_2d_source_metal_sim[668] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x76,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,0x2f,
    0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x35,0x20,0x22,0x65,0x6b,0x2f,0x73,
    0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,
    0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x35,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,
    0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x2a,0x20,0x75,0x49,0x6d,0x61,0x67,
    0x65,0x30,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x49,0x6d,0x61,0x67,0x65,
    0x30,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x69,0x6e,0x2e,0x76,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x35,0x20,
    0x2b,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x43,0x6f,0x6c,
    0x6f,0x72,0x4f,0x66,0x66,0x73,0x65,0x74,0x20,0x2a,0x20,0x5f,0x32,0x35,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float4 vColorMult [[user(locn0)]];
    };
    
    #line 11 "ek/src/ek/draw2d/draw2d.glsl"
    fragment main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
    #line 11 "ek/src/ek/draw2d/draw2d.glsl"
        out.frag_color = in.vColorMult;
        return out;
    }
    
*/
static const char fs_2d_color_source_metal_sim[405] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x65,0x6b,0x2f,0x73,0x72,0x63,
    0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,0x64,0x72,0x61,0x77,0x32,
    0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x65,
    0x6b,0x2f,0x73,0x72,0x63,0x2f,0x65,0x6b,0x2f,0x64,0x72,0x61,0x77,0x32,0x64,0x2f,
    0x64,0x72,0x61,0x77,0x32,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x4d,0x75,0x6c,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_METAL */
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before draw2d_shader.h"
#endif
static inline const sg_shader_desc* draw2d_shader_desc(sg_backend backend) {
  #if defined(SOKOL_GLCORE33)
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLCORE33 */
  #if defined(SOKOL_GLES2)
  if (backend == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES2 */
  #if defined(SOKOL_GLES3)
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  #if defined(SOKOL_D3D11)
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.attrs[2].sem_name = "TEXCOORD";
      desc.attrs[2].sem_index = 2;
      desc.attrs[3].sem_name = "TEXCOORD";
      desc.attrs[3].sem_index = 3;
      desc.vs.source = vs_2d_source_hlsl5;
      desc.vs.d3d11_target = "vs_5_0";
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_source_hlsl5;
      desc.fs.d3d11_target = "ps_5_0";
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_D3D11 */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_IOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_source_metal_ios;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_source_metal_ios;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_SIMULATOR) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_source_metal_sim;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_source_metal_sim;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  return 0;
}
static inline const sg_shader_desc* draw2d_alpha_shader_desc(sg_backend backend) {
  #if defined(SOKOL_GLCORE33)
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_alpha_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLCORE33 */
  #if defined(SOKOL_GLES2)
  if (backend == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_alpha_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES2 */
  #if defined(SOKOL_GLES3)
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_alpha_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  #if defined(SOKOL_D3D11)
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.attrs[2].sem_name = "TEXCOORD";
      desc.attrs[2].sem_index = 2;
      desc.attrs[3].sem_name = "TEXCOORD";
      desc.attrs[3].sem_index = 3;
      desc.vs.source = vs_2d_source_hlsl5;
      desc.vs.d3d11_target = "vs_5_0";
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_alpha_source_hlsl5;
      desc.fs.d3d11_target = "ps_5_0";
      desc.fs.entry = "main";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_D3D11 */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_alpha_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_IOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_source_metal_ios;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_alpha_source_metal_ios;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_SIMULATOR) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_source_metal_sim;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_alpha_source_metal_sim;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "uImage0";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw2d_alpha_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  return 0;
}
static inline const sg_shader_desc* draw2d_color_shader_desc(sg_backend backend) {
  #if defined(SOKOL_GLCORE33)
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_color_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_color_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "draw2d_color_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLCORE33 */
  #if defined(SOKOL_GLES2)
  if (backend == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_color_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_color_source_glsl100;
      desc.fs.entry = "main";
      desc.label = "draw2d_color_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES2 */
  #if defined(SOKOL_GLES3)
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPosition";
      desc.attrs[1].name = "aTexCoord";
      desc.attrs[2].name = "aColorMult";
      desc.attrs[3].name = "aColorOffset";
      desc.vs.source = vs_2d_color_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = fs_2d_color_source_glsl300es;
      desc.fs.entry = "main";
      desc.label = "draw2d_color_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  #if defined(SOKOL_D3D11)
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.attrs[2].sem_name = "TEXCOORD";
      desc.attrs[2].sem_index = 2;
      desc.attrs[3].sem_name = "TEXCOORD";
      desc.attrs[3].sem_index = 3;
      desc.vs.source = vs_2d_color_source_hlsl5;
      desc.vs.d3d11_target = "vs_5_0";
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_color_source_hlsl5;
      desc.fs.d3d11_target = "ps_5_0";
      desc.fs.entry = "main";
      desc.label = "draw2d_color_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_D3D11 */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_color_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_color_source_metal_macos;
      desc.fs.entry = "main0";
      desc.label = "draw2d_color_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_IOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_color_source_metal_ios;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_color_source_metal_ios;
      desc.fs.entry = "main0";
      desc.label = "draw2d_color_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_SIMULATOR) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_2d_color_source_metal_sim;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 64;
      desc.fs.source = fs_2d_color_source_metal_sim;
      desc.fs.entry = "main0";
      desc.label = "draw2d_color_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  return 0;
}
