name: Build

on:
  push:
    # auto-update branches checked by created PR
    branches-ignore:
      - 'update/*'
    paths-ignore:
      - '.changeset/**'

  # only test check PR to master
  pull_request:
    branches:
      - master

jobs:
  build-cmake:
    name: Build CMake targets
    runs-on: ${{ matrix.os.os }}
    strategy:
      matrix:
        os:
          - { os: ubuntu-latest,  shell: bash }
          - { os: macos-latest,   shell: bash }
          - { os: windows-latest, shell: msys2 }
    defaults:
      run:
        shell: '${{ matrix.os.shell }} {0}'
    env:
      CC: clang
      CXX: clang++
      USE_CCACHE: 1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          path-type: inherit
          release: false

      - name: Setup OpenGL on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libglu1-mesa-dev mesa-common-dev xorg-dev libasound-dev

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install CCache
        uses: eliasku/install-ccache-action@master

      - name: Setup CCache
        uses: eliasku/ccache-action@master
        with:
          key: ${{ runner.os }}

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn run ci:build-native

      - uses: actions/upload-artifact@v3
        if: runner.os == 'Linux'
        with:
          name: bin-linux
          path: tools/*/bin/linux

      - uses: actions/upload-artifact@v3
        if: runner.os == 'macOS'
        with:
          name: bin-osx
          path: tools/*/bin/osx

      - uses: actions/upload-artifact@v3
        if: runner.os == 'Windows'
        with:
          name: bin-win32
          path: tools/*/bin/win32

  build-js:
    name: Build JS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn run ci:build

  release:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: build-cmake
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: bin-osx
          path: tools

      - uses: actions/download-artifact@v3
        with:
          name: bin-linux
          path: tools

      - uses: actions/download-artifact@v3
        with:
          name: bin-win32
          path: tools

      - name: Setup execute permission
        run: |
          chmod +x tools/bmfont-export/bin/osx/bmfont-export
          chmod +x tools/bmfont-export/bin/linux/bmfont-export
          chmod +x tools/bmfont-export/bin/win32/bmfont-export.exe
          chmod +x tools/flash-export/bin/osx/flash-export
          chmod +x tools/flash-export/bin/linux/flash-export
          chmod +x tools/flash-export/bin/win32/flash-export.exe
          chmod +x tools/obj-export/bin/osx/obj-export
          chmod +x tools/obj-export/bin/linux/obj-export
          chmod +x tools/obj-export/bin/win32/obj-export.exe
          chmod +x tools/sprite-packer/bin/osx/sprite-packer
          chmod +x tools/sprite-packer/bin/linux/sprite-packer
          chmod +x tools/sprite-packer/bin/win32/sprite-packer.exe

      - name: Intall Dependencies
        run: |
          yarn --version
          yarn --frozen-lockfile

      - name: Build
        run: yarn run ci:build

      - name: Create Release Pull Request or Publish to NPM
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: yarn run release
          version: yarn run version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
